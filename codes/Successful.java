import java.io.*;
public class Successful extends ContinuationParameters
{

	// Deterministic Data
	private double[] X = {3, 2.99, 2.98, 2.9704457721, 2.9608915442, 2.9513428714, 2.9417941986, 2.9322500122, 2.9227058258, 2.9131653038, 2.9036247817, 2.8940878071, 2.8845508325, 2.8750174063, 2.8654839801, 2.8559541391, 2.8464242981, 2.8368980926, 2.8273718871, 2.8178493729, 2.8083268587, 2.7988080944, 2.7892893301, 2.7797743762, 2.7702594223, 2.7607483411, 2.7512372598, 2.7417301149, 2.7322229701, 2.7227198271, 2.7132166841, 2.7037176102, 2.6942185362, 2.6847236002, 2.6752286641, 2.6657379366, 2.6562472091, 2.6467607627, 2.6372743164, 2.6277922256, 2.6183101348, 2.6088324761, 2.5993548173, 2.5898816692, 2.5804085211, 2.5709399643, 2.5614714075, 2.5520075249, 2.5425436423, 2.5330845192, 2.5236253961, 2.5141711202, 2.5047168442, 2.4952675055, 2.4858147248, 2.476361944, 2.4669091633, 2.4574681338, 2.4480271044, 2.4385924702, 2.429157836, 2.4197289799, 2.4102966528, 2.4008643258, 2.3914319987, 2.3820125609, 2.3725931231, 2.3631803505, 2.3537644322, 2.3443485139, 2.3349325956, 2.3255308242, 2.3161290527, 2.3067338123, 2.297335308, 2.2879368036, 2.2785382993, 2.2691549055, 2.2597686422, 2.2503823789, 2.2409961156, 2.2316260332, 2.22225252, 2.2128790068, 2.2035054936, 2.1941484696, 2.1847882621, 2.1754280546, 2.1660678471, 2.1567252298, 2.1473789318, 2.1380326337, 2.1286863356, 2.1193581122, 2.1100263616, 2.1006946109, 2.0913628603, 2.0820503293, 2.0727338183, 2.0634173073, 2.0541007963, 2.0448041723, 2.0355036379, 2.0262031036, 2.0169025693, 2.0076231477, 1.9983393901, 1.9890556325, 1.9797718749, 1.9705100951, 1.9612439718, 1.9519778484, 1.942711725, 1.933468927, 1.9242213703, 1.9149738136, 1.905726257, 1.8965031139, 1.8872751299, 1.8780471458, 1.8688191617, 1.8596171083, 1.8504097938, 1.8412024793, 1.8319951647, 1.8228151304, 1.8136296763, 1.8044442221, 1.795258768, 1.7861023401, 1.7769400502, 1.7677777603, 1.7586154705, 1.749483872, 1.7403461712, 1.7312084704, 1.7220707696, 1.712965811, 1.7038542671, 1.6947427232, 1.685647032, 1.6765513408, 1.6674797528, 1.6584033251, 1.6493268974, 1.6402692582, 1.6312153287, 1.6221613992, 1.6131331569, 1.6041029699, 1.5950727828, 1.5860657319, 1.5770605346, 1.5680553372, 1.5590771912, 1.550098414, 1.5411196369, 1.5321677181, 1.5232168704, 1.5142660226, 1.505344792, 1.4964235553, 1.4875023185, 1.4786117404, 1.4697219348, 1.4608321293, 1.4519754452, 1.4431190856, 1.4342627261, 1.4254413216, 1.4166206191, 1.4077999166, 1.3990167821, 1.3902341887, 1.3814515953, 1.372709078, 1.3639673116, 1.3552255452, 1.3465269085, 1.337829001, 1.3291310935, 1.3204795569, 1.3118288999, 1.3031782428, 1.2945777134, 1.285978121, 1.2773785287, 1.2688332272, 1.2602890081, 1.251744789, 1.2432596363, 1.2347756845, 1.2262917328, 1.2178722623, 1.2094541682, 1.201036074, 1.192688701, 1.1843428901, 1.1759970793, 1.1677291862, 1.1594630943, 1.1511970023, 1.1430172171, 1.1348395124, 1.1266618077, 1.1185802476, 1.110501117, 1.1024219864, 1.0944506514, 1.0864821725, 1.0785136936, 1.070666933, 1.0628235643, 1.0550261728, 1.0472752243, 1.0395743172, 1.0319254733, 1.0243312591, 1.016794391, 1.0093178114, 1.0019046869, 0.9945584355, 0.9872827519, 0.9800816368, 0.9729594295, 0.9659208453, 0.9589710168, 0.9521155414, 0.9453605342, 0.9387126881, 0.9321793423, 0.9257685587, 0.9194892086, 0.9133510705, 0.9073649388, 0.901542746, 0.8958976974, 0.890444418, 0.8851991115, 0.8801797263, 0.8754061248, 0.8709002454, 0.8666862417, 0.8627905785, 0.8592420506, 0.8560716795, 0.8533124244, 0.8509986185, 0.8491649757, 0.8478448154, 0.8470661563, 0.8468373826, 0.8473726648, 0.8483616042, 0.8501283876, 0.8524395792, 0.8553709508, 0.8588993516, 0.8629947316, 0.8676227776, 0.8727440711, 0.8783174026, 0.8843016168, 0.890656907, 0.8973457535, 0.9043334751, 0.9115884809, 0.9190823072, 0.9267895101, 0.9346874712, 0.9427561583, 0.9509778689, 0.9593369774, 0.9678196938, 0.9764138437, 0.9851086681, 0.9938946464, 1.0027633402, 1.0117072568, 1.0207197299, 1.0297948162, 1.038927206, 1.0481121449, 1.0573453673, 1.0666230371, 1.0759416978, 1.0852982281, 1.0946898035, 1.1041138633, 1.1135680811, 1.1230503398, 1.1325587084, 1.1420914235, 1.1516468711, 1.1612235719, 1.1708201678, 1.1804354098, 1.1900681478, 1.199717321, 1.2093819493, 1.2190611267, 1.2287540136, 1.2384469005, 1.2481883493, 1.2579178248, 1.2676473004, 1.2774028892, 1.2871633993, 1.2969239095, 1.3067160142, 1.31650295, 1.3262898858, 1.3360979353, 1.3459075704, 1.3557172055, 1.3655488048, 1.3753780214, 1.3852072381, 1.3950531004, 1.4048993239, 1.4147455474, 1.4246077969, 1.4344688531, 1.4443299093, 1.454204029, 1.4640781488, 1.4739649964, 1.4838468864, 1.4937287764, 1.5036106664, 1.5135105129, 1.5234061713, 1.5333018297, 1.5431974881, 1.5531084, 1.563019312, 1.5729302239, 1.5828517142, 1.5927732045, 1.6026946948, 1.6126161851, 1.6225466658, 1.6324708772, 1.6423950886, 1.6523193, 1.6622435114, 1.6721797284, 1.6821159455, 1.6920521626, 1.7019943789, 1.7119365952, 1.7218788115, 1.7318210277, 1.7417704766, 1.7517199255, 1.7616693744, 1.771619161, 1.7815689476, 1.7915187342, 1.8014685207, 1.8114258749, 1.821383229, 1.8313405831, 1.8412979372, 1.8512595445, 1.8612211518, 1.8711827591, 1.8811443664, 1.8911091358, 1.9010739051, 1.9110386744, 1.9210034437, 1.9309713238, 1.9409392039, 1.950907084, 1.960874964, 1.9708452536, 1.9808155431, 1.9907858327, 2.0007561222, 2.0107290076, 2.020701893, 2.0306747785, 2.0406476639, 2.0506205493, 2.0605970175, 2.0705734858, 2.080549954, 2.0905264223, 2.1005028905, 2.1104793588, 2.120455827, 2.1304352798, 2.1404147326, 2.1503941854, 2.1603736381, 2.1703530909, 2.1803325437, 2.1903139099, 2.2002952761, 2.2102766424, 2.2202580086, 2.2302393748, 2.2402218855, 2.2502043962, 2.2601869069, 2.2701694176, 2.2801519283, 2.290134439, 2.3001197551, 2.3101050711, 2.3200903872, 2.3300757032, 2.3400610193, 2.3500463354, 2.3600316514, 2.370018363, 2.3800050745, 2.389991786, 2.3999784975, 2.4099652091, 2.4199519206, 2.4299386321, 2.4399270332, 2.4499154342, 2.4599038352, 2.4698922363, 2.4798806373, 2.4898690383, 2.4998574394, 2.5098458404, 2.5198359955, 2.5298261506, 2.5398163057, 2.5498064607, 2.5597966158, 2.5697867709, 2.579776926, 2.5897670811, 2.5997572362, 2.60974886, 2.6197404839, 2.6297321077, 2.6397237316, 2.6497153554, 2.6597069793, 2.6696986031, 2.679690227, 2.6896818508, 2.6996734747, 2.7096660465, 2.7196586183, 2.7296511901, 2.7396437619, 2.7496363337, 2.7596289055, 2.7696214773, 2.7796140491, 2.7896074021, 2.799600755, 2.809594108, 2.819587461, 2.829580814, 2.839574167, 2.84956752, 2.859560873, 2.869554226, 2.8795486459, 2.8895430658, 2.8995374858, 2.9095319057, 2.9195263256, 2.9295207455, 2.9395151655, 2.9495095854, 2.9595040053, 2.9694984252, 2.9794928452, 2.9894872651, 2.9994826454, 3.0094780257, 3.019473406, 3.0294687863, 3.0394641666, 3.0494595468, 3.0594549271, 3.0694503074, 3.0794456877, 3.089441068, 3.0994364483, 3.1094318286, 3.1194276604, 3.1294234921, 3.1394193239, 3.1494151557, 3.1594109874, 3.1694068192, 3.1794026509, 3.1893984827, 3.1993943145, 3.2093901462, 3.219386705, 3.2293832638, 3.2393798226, 3.2493763814, 3.2593729402, 3.269369499, 3.2793660578, 3.2893626166, 3.2993591754, 3.3093557342, 3.319352293, 3.3293488518, 3.3393454106, 3.3493419694, 3.3593385282, 3.3693357086, 3.379332889, 3.3893300695, 3.3993272499, 3.4093244303, 3.4193216107, 3.4293187911, 3.4393159715, 3.4493131519, 3.4593103324, 3.4693075128, 3.4793046932, 3.4893018736, 3.499299054, 3.5092962344, 3.5192938543, 3.5292914742, 3.539289094, 3.5492867139, 3.5592843338, 3.5692819537, 3.5792795735, 3.5892771934, 3.5992748133, 3.6092724331, 3.619270053, 3.6292676729, 3.6392652928, 3.6492629126, 3.6592605325, 3.6692581524, 3.6792562949, 3.6892544375, 3.69925258, 3.7092507226, 3.7192479038, 3.7292450851, 3.7392422663, 3.7492405059, 3.7592387455, 3.7692369851, 3.7792352246, 3.7892334642, 3.7992317038, 3.8092299434, 3.8192281829, 3.8292264225, 3.8392246621, 3.8492229017, 3.8592211412, 3.8692193808, 3.8792176204, 3.8892160764, 3.8992145325, 3.9092129885, 3.9192114446, 3.9292099006, 3.9392075538, 3.949205207, 3.9592028602, 3.9692015342, 3.9792002082, 3.9891988823, 3.9991975563, 4.0091962304, 4.0191949044, 4.0291935785, 4.0391922525, 4.0491909265, 4.0591896006, 4.0691882746, 4.0791869487, 4.0891856227, 4.0991842968, 4.1091829708, 4.1191817757, 4.1291805805, 4.1391793854, 4.1491781903, 4.1591763678, 4.1691745454, 4.179172723, 4.1891716156, 4.1991705083, 4.209169401, 4.2191682936, 4.2291671863};
	
	private double[] Y = {1.6797015861, 1.6766244035, 1.6735410751, 1.6705886577, 1.6676407463, 1.6646703284, 1.6617160646, 1.6587311959, 1.6557676634, 1.6527710813, 1.6497972973, 1.6467894336, 1.6438050335, 1.6407859355, 1.6377907163, 1.6347603153, 1.6317541267, 1.6287123117, 1.6256950191, 1.6226416631, 1.619613136, 1.6165481047, 1.6135082121, 1.6104313672, 1.607379976, 1.6042911757, 1.6012281506, 1.5981272499, 1.5950524528, 1.5919393039, 1.5888525941, 1.5857270456, 1.5826282793, 1.5794901771, 1.5763792076, 1.5732283941, 1.5701050716, 1.5669413855, 1.5638055572, 1.5606288341, 1.5574803438, 1.5542904153, 1.5511291034, 1.5479257977, 1.5447515013, 1.5415346425, 1.538347195, 1.5351166033, 1.5319158344, 1.5286713259, 1.5254570616, 1.522198448, 1.5189705105, 1.5156975992, 1.5124349235, 1.5091646313, 1.5058994168, 1.5026027382, 1.4993297638, 1.4960147333, 1.4927292332, 1.489397758, 1.4860764148, 1.4827475014, 1.4794236348, 1.4760657313, 1.4727335735, 1.4693569391, 1.4659893621, 1.4626149962, 1.4592451563, 1.4558380636, 1.4524592132, 1.4490340778, 1.4456182013, 1.4421953608, 1.4387771629, 1.4353197525, 1.4318703853, 1.4284149525, 1.4249635635, 1.4214702012, 1.4179863309, 1.4144952818, 1.4110090186, 1.4074808279, 1.4039613674, 1.4004352881, 1.3969136214, 1.3933474198, 1.3897911822, 1.3862273676, 1.3826686043, 1.3790649128, 1.3754706769, 1.3718692309, 1.3682725917, 1.3646285022, 1.3609949434, 1.3573533285, 1.3537170843, 1.3500325892, 1.3463583299, 1.3426762161, 1.3389993386, 1.3352716908, 1.3315552424, 1.3278301696, 1.3241108463, 1.3203395576, 1.3165793582, 1.3128105897, 1.309047534, 1.3052299164, 1.3014242809, 1.2976093506, 1.2938006168, 1.289935726, 1.2860828727, 1.2822206457, 1.2783646679, 1.2744497789, 1.2705477855, 1.2666357072, 1.2627303521, 1.2587640661, 1.2548108859, 1.2508474119, 1.2468908005, 1.2428702589, 1.2388636801, 1.2348460821, 1.2308358303, 1.2267591575, 1.2226968101, 1.218623102, 1.2145569676, 1.2104210679, 1.2063003833, 1.2021675675, 1.1980119512, 1.193876355, 1.1896677768, 1.1854703243, 1.1812639614, 1.1770259772, 1.1727802223, 1.168540807, 1.1642401979, 1.1599441826, 1.1556444878, 1.1512998839, 1.1469517306, 1.14260654, 1.1382023254, 1.1337998755, 1.1293960428, 1.1249388329, 1.1204798724, 1.1160224346, 1.1115040009, 1.1069860883, 1.1024678262, 1.0978893785, 1.0933099288, 1.0887314124, 1.0840876531, 1.0794438513, 1.0748001913, 1.0700897234, 1.0653785444, 1.0606680893, 1.0558865611, 1.0511047149, 1.046323277, 1.0414678186, 1.0366117378, 1.03175635, 1.0268226174, 1.0218884096, 1.0169547945, 1.0119388354, 1.0069222495, 1.0019064216, 0.9968033821, 0.9916997547, 0.98659689, 0.981401769, 0.9762059706, 0.9710110626, 0.965718116, 0.9604244817, 0.9551318054, 0.9497348102, 0.9443370613, 0.9389404032, 0.9334323385, 0.9279234872, 0.9224158477, 0.9167889264, 0.9111611625, 0.9055347777, 0.8997802151, 0.8940247699, 0.8882708892, 0.8823787985, 0.8764857812, 0.8705945629, 0.8645537164, 0.8585119162, 0.8524721953, 0.8462698068, 0.8400664549, 0.8338049711, 0.8274860908, 0.8211062594, 0.8146640714, 0.8081575335, 0.8015846107, 0.7949431432, 0.7882308689, 0.7814454125, 0.7745842804, 0.7676448546, 0.7606243876, 0.7535199968, 0.7463286603, 0.7390472127, 0.7316723434, 0.7242005959, 0.7166283705, 0.7089519303, 0.7011674125, 0.6932708465, 0.685258181, 0.6771253223, 0.6688681893, 0.6604827872, 0.6519653082, 0.6433122636, 0.6345206581, 0.6255882147, 0.6165136602, 0.6072970832, 0.5979403715, 0.5884477336, 0.5788262964, 0.569086759, 0.559244054, 0.5493179444, 0.5393334495, 0.5293209272, 0.5193060866, 0.5093446706, 0.4994709128, 0.4897256397, 0.4801434666, 0.4707654033, 0.461621884, 0.4527375306, 0.4441298656, 0.4358097256, 0.4277820644, 0.4200468621, 0.4126001387, 0.4054349291, 0.3985421448, 0.3919112957, 0.3855310665, 0.3793897594, 0.3734756221, 0.3677770822, 0.3622829091, 0.3569823182, 0.3518650338, 0.3469213219, 0.3421420003, 0.3375184338, 0.333042519, 0.3287066635, 0.3245037593, 0.3204271563, 0.316470633, 0.3126283693, 0.3088949181, 0.30526518, 0.3017343779, 0.2982980337, 0.2949519467, 0.2916921731, 0.2885150074, 0.2854169649, 0.2823947657, 0.2794453198, 0.2765657137, 0.2737531981, 0.2710051756, 0.2683191911, 0.2656929211, 0.2631241656, 0.2606108391, 0.2581509635, 0.255653121, 0.2533820292, 0.2510714004, 0.2487890166, 0.2465899114, 0.244414361, 0.242222374, 0.2401875812, 0.2381342285, 0.2360939704, 0.2341419486, 0.2322000004, 0.2302511269, 0.22841975, 0.2265794824, 0.224745439, 0.2229943939, 0.221247425, 0.219497696, 0.217840913, 0.2161797112, 0.2145215891, 0.2129380814, 0.2113034172, 0.2097977684, 0.2082651228, 0.2067509854, 0.2052245092, 0.203808342, 0.2023673075, 0.200943256, 0.1995078825, 0.1981722184, 0.1967686848, 0.1954103975, 0.1941554811, 0.1928307402, 0.191552549, 0.1902433246, 0.1890595529, 0.1878298468, 0.1866312766, 0.1854119492, 0.1842064599, 0.1830762423, 0.1818949178, 0.1807476645, 0.1796718094, 0.1785479155, 0.1774560475, 0.1763428288, 0.1753332536, 0.1742540809, 0.1732213065, 0.1722199448, 0.1711976184, 0.1701892685, 0.169171601, 0.1682445788, 0.1672566451, 0.166309319, 0.1653349212, 0.1644544673, 0.1635111268, 0.1626097108, 0.1616803451, 0.1608372543, 0.159936464, 0.1590741401, 0.1581861719, 0.1573810497, 0.156520525, 0.1556969353, 0.1548487223, 0.1540748706, 0.153251317, 0.152460898, 0.1516483892, 0.1509088755, 0.1501205669, 0.1493647883, 0.148587323, 0.1478243155, 0.147134761, 0.1463960684, 0.1456901345, 0.1449623614, 0.1442491478, 0.1435262279, 0.1428097789, 0.1421650536, 0.1414723804, 0.1408116724, 0.1401296543, 0.1394618429, 0.1387845604, 0.1381710514, 0.1375149463, 0.1368872386, 0.1362405992, 0.135606581, 0.1350139652, 0.1343937017, 0.1337918701, 0.1331777505, 0.1325718229, 0.131960434, 0.1314147372, 0.1308251403, 0.1302648102, 0.1296849689, 0.129118135, 0.1285426295, 0.1279729051, 0.1274549544, 0.1269024385, 0.126372966, 0.1258281312, 0.125293538, 0.124752117, 0.1242152479, 0.1237308889, 0.1232114671, 0.1227154205, 0.1222037904, 0.1217025493, 0.1211943823, 0.1206908325, 0.1201842045, 0.1197366622, 0.1192496754, 0.1187889849, 0.1183107635, 0.1178442294, 0.1173699037, 0.1169007724, 0.1164281782, 0.1159578926, 0.1155447161, 0.1150934249, 0.1146675435, 0.1142247223, 0.1137931943, 0.1133541374, 0.1129200998, 0.1124827161, 0.1120475631, 0.1116109229, 0.1112225446, 0.1108019664, 0.1104028548, 0.1099894322, 0.1095855502, 0.1091753078, 0.1087693057, 0.1083604767, 0.1079935301, 0.1075986422, 0.1072223818, 0.1068337031, 0.1064533033, 0.1060673842, 0.1056851446, 0.1053004521, 0.1049173948, 0.1045802339, 0.1042124506, 0.1038650822, 0.1035041039, 0.1031521989, 0.102794245, 0.1024403236, 0.1020837139, 0.1017288965, 0.1013728842, 0.1010176685, 0.1006619217, 0.1003542184, 0.1000144657, 0.0996960792, 0.0993634485, 0.099040314, 0.0987108487, 0.0983856039, 0.0980575455, 0.0977313628, 0.0974039296, 0.0970773301, 0.0967501748, 0.0964592157, 0.0961441168, 0.0958451111, 0.0955353765, 0.0952327945, 0.0949254442, 0.0946212727, 0.094314982, 0.0940101041, 0.0937042844, 0.0934388696, 0.0931465048, 0.0928721066, 0.0925857307, 0.09230734, 0.0920236258, 0.0917434606, 0.0914609294, 0.0911799755, 0.0908979701, 0.0906166657, 0.090334894, 0.0900534338, 0.0897717659, 0.0894902365, 0.0892493333, 0.0889813355, 0.0887314008, 0.088469424, 0.0882154753, 0.0879561745, 0.0877004418, 0.0874423303, 0.0871858047, 0.0869282219, 0.0866713438, 0.0864139959, 0.0861569613, 0.0858997178, 0.0856426135, 0.0854214981, 0.0851763833, 0.0849472681, 0.0847074865, 0.0844748159, 0.0842374046, 0.0840031537, 0.0837667959, 0.0835318427, 0.0832959531, 0.0830606878, 0.0828250063, 0.0825896023, 0.0823540133, 0.0821185476, 0.0818829996, 0.0816863762, 0.081463796, 0.0812585203, 0.0810417082, 0.0808033103, 0.0805793179, 0.0803457219, 0.0801535661, 0.0799337692, 0.0797323998, 0.0795187454, 0.0793132809, 0.0791023565, 0.078895072, 0.0786853609, 0.0784772676, 0.0782680958, 0.0780596429, 0.0778507108, 0.0776420982, 0.0774332725, 0.0772549306, 0.0770562636, 0.0768711466, 0.0766769962, 0.0764888682, 0.0762700713, 0.0760717316, 0.0758597539, 0.075691215, 0.0754937046, 0.0753155086, 0.0751244364, 0.0749419483, 0.0747537374, 0.0745693417, 0.0743824026, 0.0741971591, 0.0740107852, 0.0738251649, 0.0736390422, 0.0734532544, 0.0732672433, 0.0730813811, 0.0729241519, 0.0727478326, 0.0725842401, 0.072412163, 0.0722202255, 0.0720415361, 0.0718540145, 0.0717012048, 0.0715252462, 0.0713647201, 0.0711939057};

	private double[] x_noise;
	private double[] y_noise; 
	private double[] y_err; 
	
	// this is the interval in the determinisitc data set
	private double 	 tolerance = 0.01;// maximum discrepence between stochastic and deterministic cases
	private double	 successBounds = 2.0;// the number of standard deviation in which a success is considered

	private int			 numOfPoints;			// number of elements in x_noise;
	private boolean  successful = true;// true of successful, false otherwise
	private double[] residual;				// residual between stochastic and determinisitic case
	private double   totolResidual;		// sum of element in residual
	private double	 maxResidual;			// maximum difference between stocahstic and detemrinisitic case
	private double	 meanResidual;		// totalResidual / number of elements
	private double	 varianceResidual;// variance of the residuals 
	private double	 standDevResidual;// standard deviation of the residuals 
	private double	 standErrResidual;// standard error of the residuals 
	
	// constructors 
	public Successful() {}
	public Successful(double[] xx, double[] yy, double[] err){
		this.x_noise = xx;
		this.y_noise = yy;
		this.y_err = err;
		this.numOfPoints = xx.length;
		if (yy.length < xx.length)
			this.numOfPoints = yy.length;
		if (yy.length != xx.length)
			System.out.println("Warning: arrays not the same length! taking shortest values");
			
		this.residual = new double[numOfPoints];
	}

	// methods
	public void setBounds(double range){
		this.successBounds = range; 
	}
	
	public double getBounds(){
		return this.successBounds;
	}
	
	public void setValues(double[] xx, double[] yy, double[] err)
	{
		this.x_noise = xx;
		this.y_noise = yy;
		this.y_err = err;
		this.numOfPoints = xx.length;
		if (yy.length < xx.length)
			this.numOfPoints = yy.length;
		if (yy.length != xx.length)
			System.out.println("Warning: arrays not the same length! taking shortest values");
		
		this.residual = new double[numOfPoints];
	}

	public boolean isSuccessful()
	{
		// calculate residual
		calculateResidual();
		appendFile();
		return successful;
	}

	private void calculateResidual()
	{
	
	try {
		File file = new File("outputfiles/residual.txt");
		FileWriter fileWriter = new FileWriter(file,true);
		BufferedWriter bufferFileWriter  = new BufferedWriter(fileWriter);	
				
		int ks=0; // dont want to match on wrong branch, or repeat comparisons
		int kf=0; // so not updating loop starting point during interation
	
		fileWriter.append("iteration\tresidual\tx_stochastic\tx_deterministic\ty_stochastic\ty_deterministic\n");
		
		// loop through the stochastic system
		outer:
		for (int i=0; i<numOfPoints; i++)
		{
			residual[i] = 1000.0;
			double previousResidualX = 1000.0;
			
			// loop through the determinisic system to 
			// obtain closest match to stochastic x value
			inner:	
			for (int j=ks; j<600; j++)
			{
				double currentResidualX = Math.abs( x_noise[i] - X[j] );
				if ( currentResidualX < tolerance )
				{
					kf=j;	
					break inner;
				}	
				
				if (x_noise[i] < 0.5){
					successful = false;
System.out.println("x_noise[i] = " + x_noise[i] + " < 0.5");
fileWriter.append("x_noise[i] = " + x_noise[i] + " < 0.5" + "\n");
					break outer;
				}
			}
			
			// determine if the run is successful
			// add some condition to make it unsuccessful 
			residual[i] = Math.abs( y_noise[i] - Y[kf] );
			if ( residual[i] > successBounds*y_err[i] && x_noise[i] > 1.2 ){
				successful = false;
				
System.out.println("residual[i] = " + residual[i] + " > " + (successBounds*y_err[i]) );
fileWriter.append("residual[i] = " + residual[i] + " > " + (successBounds*y_err[i]) + "\n");
			}

			// kf is the index of deterministic case that is below the tolerance
			fileWriter.append(i + "\t" + residual[i] + "\t" + x_noise[i]  
													+ "\t" + X[kf] + "\t" + y_noise[i]  
													+ "\t" + Y[kf] + "\n");
			
			// update the loop iterate ks to kf+1 
			// this is to avoid being stuck at kf 
			ks = kf+1;
		
			totolResidual += residual[i];
		}
		
		
		meanResidual = totolResidual / (double) numOfPoints;
		maxResidual = 0.0;
		for (int i=0; i<numOfPoints; i++)
		{
			if (maxResidual < residual[i])
				maxResidual = residual[i];	
					
			varianceResidual = getVariance(residual);
			standDevResidual = getStandardDev(residual);
			standErrResidual = standDevResidual / Math.sqrt((double) numOfPoints);

		}		
	
		bufferFileWriter.close();
	} catch (IOException e){
		System.out.println(e);
	} finally  {
		try{ } 
		catch (Exception ex) {}
	}
		
	}

	private double getVariance(double[] xxx){
		return Math.pow( getStandardDev(xxx), 2 );
	}
		
	private double getStandardDev(double[] xxx){
		double temp = 0;
		for (double a : xxx)
			temp += Math.pow((meanResidual-a),2);
		return Math.sqrt( temp/xxx.length );
	}


	// getter methods
	public double[] getResidual() 				{ return residual; }
	public int 			getNumberOfElements()	{ return numOfPoints;   }
	public double 	getTotolResidual()		{ return totolResidual; }
	public double 	getMaxResidual()  		{ return maxResidual;   }
	public double 	getMeanResidual() 		{ return meanResidual;  }
	public double 	getVarianceResidual() { return varianceResidual; }
	public double 	getStandDevResidual() { return standDevResidual; }
	public double 	getStandErrResidual() { return standErrResidual; }
	
	
	private void appendFile(){
		// open file
		String name = "successfulContinuation.txt";
		try {
			File file = new File(name);
			FileWriter fileWriter = new FileWriter(file,true);
			BufferedWriter bufferFileWriter  = new BufferedWriter(fileWriter);	
				
			
			fileWriter.append( "#successful\ttotolResidual\tmeanResidual\tvarianceResidual\tstandDevResidual\tstandErrResidual\tnumOfPoints\tmaxResidual\tresidual[i]\n");

				
			fileWriter.append( Boolean.toString(successful) + "\t");
			fileWriter.append( Double.toString(totolResidual) + "\t");
			fileWriter.append( Double.toString(meanResidual) + "\t");
			fileWriter.append( Double.toString(varianceResidual) + "\t");
			fileWriter.append( Double.toString(standDevResidual) + "\t");
			fileWriter.append( Double.toString(standErrResidual) + "\t");
			fileWriter.append( Integer.toString(numOfPoints) + "\t");
			fileWriter.append( Double.toString(maxResidual) + "\t");
			
			for (int i=0; i<numOfPoints; i++)
				fileWriter.append( Double.toString(residual[i]) + "\t");
			
			fileWriter.append( "\n");
			
			bufferFileWriter.close();
		} catch (IOException e){
			System.out.println(e);
		} finally  {
			try{ } 
			catch (Exception ex) {}
		}
	
	}

}