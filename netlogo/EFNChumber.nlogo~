
extensions [matrix]

globals [materialtolandfill moneystart moneyend interestrate CO2-tax contractrate ROCS-incentive]
  

breed [ companies company ]
breed [ foodprocessors foodprocessor ]
breed [ externalworld externalworlds ]
undirected-link-breed [ friends friend ]
directed-link-breed [ contracts contract ]

companies-own [materialmaxin materialin materialneed materialout materialinprofile process contractlength moneyold money profit ethos unitrawmaterialcost unitproductvalue operatingcosts operatingvolume initialloan loan age]
foodprocessors-own [materialmaxin materialin materialneed materialout materialinprofile process moneyold money profit ethos unitcontractvalue unitproductvalue priceincrease pricedecrease]
contracts-own [materialtype lengthofcontract amountofcontract valueofcontract]
; contractlength is how long contracts are.
;materialmaxin is the amount of material that companies can take in. 
;materialin specifies the total amount of material the company takes in.
;materialneed is the difference between what the company currently takes in and what their maximum capacity is. 
;materialout is the amount of material that a company produces. 
;materialinprofile is the input profile of a company
;process is a matrix that specifies how the inputs get converted to an output.
;unitcontractvalue is the amount that the materialout can be sold to a company for - a negative value represents 
; a charge.  The unitcontractvalue is adjusted up or down depending on whether a food processor can sell or not
; sell their waste.
;unitproductvalue is the amount that the materialout is sold for to the outside world or landfill.
;
;amountofcontract is the number of tonnes/day that is transferred under the contract.
;valueofcontract is the total value of the contract/day = number of tonnes * unit value of product.




;;============================================
;; Begin SAT edits for EFNC 
;;============================================
to initialise-model
  
  ;; set price as input value
  ;; initial-price
  ask foodprocessors [ 
    ;; unitcontractvalue [][oil waste][solid waste] [][]
    set unitcontractvalue matrix:set-and-report unitcontractvalue 1 0 initial-price-solid
    set unitcontractvalue matrix:set-and-report unitcontractvalue 2 0 initial-price-oil
  ]
     
  create-composter    
  create-AD 
  
end

to create-composter 
  
  create-companies composter-number-of-companies [ 
    
    ;; length of contracts
    let composter-contract-length random (2 * mean-composter-contract-length + 1) ;; so between 1 and 2 * mean-composter-contract-length
    set contractlength composter-contract-length
  
    ;; number of contracts
    ;;let composter-contract-number random (2 * mean-composter-contract-number + 1) 
    
    ;;============================================
    ;; other macroscopic variables to initialise?
    ;;============================================
    set materialmaxin random 200
    set size materialmaxin / 200
    set materialinprofile matrix:from-row-list [[0] [1] [0] [0] [0]]
    set materialin matrix:from-row-list [ [0] [0] [0] [0] [0] ]
    set materialneed matrix:times-scalar materialinprofile materialmaxin
    set process matrix:from-row-list [ [0 0.55 0 0 0] [0 0 0 0 0] [0 0 0 0 0] [0 0.324 0 0 0] [0 0 0 0 0]]
    set unitrawmaterialcost 0 
    set unitproductvalue matrix:from-row-list [[20] [0] [0] [-1] [0]] 
    matrix:set unitproductvalue 3 0 ( - CO2-tax )
    set color black
    set operatingcosts 5 * materialmaxin 
    set initialloan 500 * materialmaxin
    set loan initialloan
    set money initialloan
    set moneyold money
    set profit 0
    set age 0
    
    setxy 5 -12
    let xval random -12 - 5
    let yval random -12 - 5
    setxy xval yval

 ] 
end

to create-AD 

  create-companies AD-number-of-companies [       
   
    ;; length of contracts
    let AD-contract-length random (2 * mean-AD-contract-length + 1) ;; so between 1 and 2 * mean-AD-contract-length
    set contractlength AD-contract-length
    
    ;; number of contracts
    ;;let AD-contract-number random (2 * mean-AD-contract-number + 1) ;; so between 1 and 2 * mean-AD-contract-length
      
    ;;============================================
    ;; other macroscopic variables to initialise?
    ;;============================================
    let companysize 150
    set materialmaxin companysize
    set size materialmaxin / 200
    set materialinprofile matrix:from-row-list [ [0] [1] [0] [0] [0] ] 
    set materialneed matrix:from-row-list [ [0] [0] [0] [0] [0] ]
    set materialin matrix:from-row-list [ [0] [0] [0] [0] [0] ]
    set process matrix:from-row-list [ [0 1 0 0 0] [0 0 0 0 0] [0 0 0 0 0] [0 1.4 0 0 0] [0 0 0 0 0] ] 
    set unitrawmaterialcost 0 
    set unitproductvalue matrix:from-row-list [[1] [0] [0] [0] [0]]
    matrix:set unitproductvalue 0 0 ( 9.6 * ROCs-incentive + 0.04 * 50)
    matrix:set unitproductvalue 3 0 ( -1 * CO2-tax )
    set operatingcosts 80 * companysize
    set initialloan 50000 * companysize
    set loan initialloan
    set money initialloan
    set moneyold money
    set profit 0
    set color red
    set age 0
    
    let xval random 12 + 5
    let yval random -12 - 5
    setxy xval yval
  ]

end


to make-friends
     
    if ( color = red ) or ( color = black ) [
      create-friends-with n-of number-of-wasteproducers foodprocessors
      ask friends [
        set color red
      ] 
    ]
    
end
;;============================================
;; End SAT edits for EFNC 
;;============================================


to setup
  ;;set EFNC true
  ;; (for this model to work with NetLogo's new plotting features,
  ;; __clear-all-and-reset-ticks should be replaced with clear-all at
  ;; the beginning of your setup procedure and reset-ticks at the end
  ;; of the procedure.)
  
  __clear-all-and-reset-ticks
  ask patches [set pcolor white]
  set moneystart 0
  set moneyend 0
  set interestrate 0.05
  set CO2-tax 0
  set contractrate 5
  set materialtolandfill matrix:from-row-list [ [0] [0] [0] [0] [0] ]
  set-default-shape foodprocessors "circle"
  set-default-shape companies "circle"
  set ROCS-incentive 14
  
  create-foodprocessors number-of-wasteproducers 

  ask foodprocessors [
    set materialmaxin 1000 + random 5900
    set size materialmaxin / 6000
    set materialinprofile matrix:from-row-list [[1] [0] [0] [0] [0]]
    set materialin matrix:times-scalar materialinprofile materialmaxin
    set materialneed matrix:times-scalar materialinprofile materialmaxin
    set process matrix:from-row-list [ [0.925 0 0 0 0] [0.072 0 0 0 0] [0.003 0 0 0 0] [0 0 0 0 0] [0 0 0 0 0]] 
    set unitcontractvalue matrix:from-row-list [[10] [-41] [600] [0] [0]]
    set unitproductvalue matrix:from-row-list [[20 ] [ -64 ] [ -64 ] [0] [0]]
    matrix:set unitproductvalue 1 0 ( - landfillprice )
    matrix:set unitproductvalue 2 0 ( - landfillprice )
    set priceincrease matrix:from-row-list [[0] [0.10] [0.10] [0] [0]]
    set pricedecrease matrix:from-row-list [[0] [0.05] [0.05] [0] [0]]
    set money 100
    set moneyold money
    set profit 0
    set color green
    let xval random -19
    let yval random 19
    setxy xval yval    
  ]
  
  create-externalworld 1
  
  ask externalworld [
    set color green
    set size 4
    set shape "square"
    setxy 18 0  
  ]
  reset-ticks  
  
;  movie-start "out1.mov"
;  movie-set-frame-rate 1
;  movie-grab-interface 
;  repeat 6000
;   [ go
;      if ticks mod 50 = 0 [ movie-grab-interface ]
;   ]
;   movie-close

;;============================================
;; Begin SAT edits for EFNC 
;;============================================
if EFNC = true [
  initialise-model
  
  ;;food-processors-buy-raw-materials
  ask foodprocessors [ flow-materials ]
  
  ask companies [
    make-friends
   
    initialise-contracts
  ]
]
;;============================================
;; End SAT edits for EFNC
;;============================================

end

to initialise-contracts
  let contactNumber 0
  
  ask companies [
    ;; number of contracts
    if color = black [
      set contactNumber random (2 * mean-composter-contract-number + 1) 
    ]
    if color = red [
      set contactNumber random (2 * mean-AD-contract-number + 1) 
    ]
    
    let z 0
    while [z <= contactNumber] [
      setup-contract
    ]
  ]
end

to setup-contract
 let p 1 
    while [p <= 3] [ 
      let myneed matrix:get materialneed p 0 - matrix:get materialin p 0

      let needprovided 0
      let needsatisfied 0
      let vcontract 0
      let lcontract 0
      set lcontract contractlength
      
      if myneed > 0 [
        let possiblepartners nobody
        let chosenpartner nobody
        
        set possiblepartners friend-neighbors with [ matrix:get materialout p 0 > 0 ]

        if any? possiblepartners [
          set materialout matrix:times process materialin
          set chosenpartner min-one-of possiblepartners [ matrix:get unitcontractvalue p 0 ]
          
          ask chosenpartner [ 
            set needprovided matrix:get materialout p 0 
          ]
          ifelse needprovided > myneed [ 
            set needsatisfied myneed 
          ]
          [ 
            set needsatisfied needprovided 
          ]
          ask chosenpartner [ 
            set vcontract matrix:get unitcontractvalue p 0 * needsatisfied 
          ]
          create-contract-from chosenpartner [ 
            set materialtype p
            set lengthofcontract lcontract
            set amountofcontract needsatisfied
            set valueofcontract vcontract
            set thickness 0.2
            if p = 1 [ set color black ]
            if p = 2 [ set color blue ]
            if p = 3 [ set color green ]
          ] 
          ask chosenpartner [ 
            matrix:set materialout p 0 needprovided - needsatisfied  
            set money money + vcontract
          ]
        ] 
        matrix:set materialneed p 0 myneed - needsatisfied
        let currentmaterialin matrix:get materialin p 0
        matrix:set materialin p 0 currentmaterialin + needsatisfied 
        set money money - vcontract
      ]
      
      set p p + 1
    ]
end



;;============================================
to make-movie
  movie-start "out2.mov"
  movie-set-frame-rate 1
;  movie-grab-interface 
  repeat 4000
   [ go
     if ticks mod 50 = 0 [ movie-grab-interface ]
   ]
   movie-close
end
;;============================================

to go
  
  set ROCs-incentive ROs-incentive
  ;  count-initial-money
  ; Create waste.
  food-processors-buy-raw-materials
  ask foodprocessors [ flow-materials ]
  
  ; Supply waste to existing contracts
  ask contracts [ update-existing-contracts ]
  ; Set up 5 new contracts to try to get rid of the rest of the waste.  
  let n 0
    while [ n < contractrate ] [  
      ask companies [ setup-new-contracts ]
      set n n + 1
    ]
    
    ; Food processors now update their "selling" prices for waste.  The price goes down if they 
    ; cannot get rid of all their waste, goes up if they can.  Initially prices have been set so
    ; that they have to pay to get rid of solid waste, but get an income from waste oil.   
    ask foodprocessors [ update-selling-prices ]
    ; Finally food processors "sell" all their material ie the goods they have produced and
    ; any remaining waste.  They get an income form their produce
    ; and pay for everything else to go to landfill. 
    ask foodprocessors [ sell-materialout ]
    ; Companies that deal with waste buy any additional raw materials that they need.
    companies-buy-raw-materials
  ; Now the companies that deal with waste process the waste to produce outputs.  
    ask companies [ flow-materials ]
    ; Companies then sell their products.
    ask companies [ sell-materialout ]
    ; Companies then pay off any loans and pay any operating costs.
    ask companies [ update-finances ]
    ; Calculate profit
    ask companies [ calculate-profit ]
    ask foodprocessors [ calculate-profit ]
    ; If food processors or companies run out of money, then they go bust. 
    ask foodprocessors [ go-bust ]
    ask companies [ go-bust ]
    ask companies [ get-older ]
 
    tick
    makeplots
    ; New friends are made 
    ask companies [ make-new-friends ]
    ; New companies are created if there is any waste that they can process.   
    create-new-companies
    ;  count-final-money
    ; Contract details are updated: they end if they have reached the end of their contract time.
    update-contract-details
    ; Prices that are set by the sliders (landfill price) are updated.  
    ask foodprocessors [ update-prices ]
    ask companies [ update-prices ]
    ;  ask companies with [color = red] [
    ;   matrix:set unitproductvalue 0 0 ( 9.6 * ROCs-incentive + 0.04 * 50)
    ; ]
    ; initialise variables for another loop  
    set materialtolandfill matrix:from-row-list [ [0] [0] [0] [0] [0] ]
    ask companies [
      set materialneed matrix:times-scalar materialinprofile materialmaxin
    ]
    set moneystart 0
    set moneyend 0
    ;  show mean [ matrix:get unitcontractvalue 1 0 ] of foodprocessors
    ;  show mean [ matrix:get unitcontractvalue 2 0 ] of foodprocessors

    if ticks > 30000 [ stop] 
end

to count-initial-money
  ask companies [
;    show money
    set moneystart moneystart + money
 ;   show moneystart
  ]
    ask foodprocessors [
;    show money
    set moneystart moneystart + money
 ;   show moneystart
  ]
end

to count-final-money
  ask companies [
;    show money
    set moneyend moneyend + money
 ;   show moneystart
  ]
    ask foodprocessors [
;    show money
    set moneyend moneyend + money
 ;   show moneystart
  ]
end

to food-processors-buy-raw-materials
  ask foodprocessors [
      let mcost 0
      set materialin matrix:times-scalar materialinprofile materialmaxin
      set mcost ( matrix:get materialin 0 0  * matrix:get unitcontractvalue 0 0 )
      set money money - mcost
  ]
end

; flow-material describes the processing that the food processors/companies do.  
to flow-materials 
  set materialout matrix:times process materialin
; Now set to zero the material in for M, S, L, G and W. 
   set materialin matrix:from-row-list [ [0] [0] [0] [0] [0] ]
end

; supply existing contractors.  Update finances accordingly.
to update-existing-contracts
    let mtype materialtype
    let acontract amountofcontract
    let vcontract valueofcontract
; update supplier by reducing the amount of material they have left to sell and increasing the
; money they have.
    ask end1 [
      let newmaterialout matrix:get materialout mtype 0
      set newmaterialout newmaterialout - acontract
      matrix:set materialout mtype 0 newmaterialout
      set money money +  vcontract
    ]   
; update client by increasing the amount of material they have coming in and decreasing the
; money they have.
    ask end2 [
      let newmaterialin matrix:get materialin mtype 0
      set newmaterialin newmaterialin + acontract
      matrix:set materialin mtype 0 newmaterialin
      set money money - vcontract
    ] 
;  show materialtype
; show amountofcontract
; show valueofcontract
end

; set-up-new-contracts first looks to see who has some material need.  For the
; companies that have a material need it looks to see who, in their friendship 
; network could supply that material need. The one who is selling at the lowest
; price is then chosen.
; A contract (link) is then established.  This link is assigned a length of time 
; and a material flow amount and value and the material variables of the ends of the link
; are updated.
to setup-new-contracts
;  show materialneed
  let p 1 
  while [p <= 3] [ 
    let myneed matrix:get materialneed p 0 - matrix:get materialin p 0
    let needprovided 0
    let needsatisfied 0
    let vcontract 0
    let lcontract 0
    set lcontract contractlength
    if myneed > 0 [
      let possiblepartners nobody
      let chosenpartner nobody
      set possiblepartners friend-neighbors with [ matrix:get materialout p 0 > 0 ]
      if any? possiblepartners [
;        set chosenpartner one-of possiblepartners
        set chosenpartner min-one-of possiblepartners [ matrix:get unitcontractvalue p 0 ]
        ask chosenpartner [ set needprovided matrix:get materialout p 0 ]
        ifelse needprovided > myneed [ set needsatisfied myneed 
        ]
        [ set needsatisfied needprovided 
        ]
        ask chosenpartner [ set vcontract matrix:get unitcontractvalue p 0 * needsatisfied ]
        create-contract-from chosenpartner [ set materialtype p
          ;                                       set lengthofcontract timeforcontract
          set lengthofcontract lcontract
          set amountofcontract needsatisfied
          set valueofcontract vcontract
          set thickness 0.2
          if p = 1 [ set color black ]
          if p = 2 [ set color blue ]
          if p = 3 [ set color green ]
;          show materialtype
;          show amountofcontract
;          show valueofcontract
        ] 
        ask chosenpartner [ matrix:set materialout p 0 needprovided - needsatisfied  
          set money money + vcontract
        ]
      ] 
      matrix:set materialneed p 0 myneed - needsatisfied
      let currentmaterialin matrix:get materialin p 0
      matrix:set materialin p 0 currentmaterialin + needsatisfied 
      set money money - vcontract
    ]
    set p p + 1
;    show materialout
;    show money 
;    show materialneed
;    show materialin
  ]
end  

; If food processors have no solid waste or waste oil left after supplying composters, AD and biodiesel then increase the
; price they are selling at.  If they have waste left, then reduce the price.
to update-selling-prices
  let p 1
  while [p <= 2][
    let wasteleft matrix:get materialout p 0
    let oldcontractvalue matrix:get unitcontractvalue p 0
    let priceincrement matrix:get priceincrease p 0
    let pricedecrement matrix:get pricedecrease p 0    
      ifelse wasteleft > 0 [ 
      let minprice ( - landfillprice )
        ifelse oldcontractvalue > minprice [   
        matrix:set unitcontractvalue p 0 oldcontractvalue - pricedecrement 
        ]
        [
        matrix:set unitcontractvalue p 0 minprice       
        ]
      ]
      [
      matrix:set unitcontractvalue p 0 oldcontractvalue + priceincrement 
      ]
    set p p + 1     
  ]
;  show unitcontractvalue
end

; Sell any products that are produced. Any solid waste or waste oil that has not been sold
; is sent to landfill.  The amount of material sent to landfill is monitored.  It is assumed
; that all the material that flows out is either sold for profit of sent to landfill, so 
; materialout is set to zero at the end of this subroutine.
;
to sell-materialout
  let totalproductvalue matrix:times-element-wise materialout unitproductvalue
  let p 0
  while [p <= 4] [
    let pvalue matrix:get totalproductvalue p 0
    set money money + pvalue
    let newwaste matrix:get materialout p 0
    let oldwaste matrix:get materialtolandfill p 0
    matrix:set materialtolandfill p 0 newwaste + oldwaste
    set p p + 1 
  ]
  set materialout matrix:from-row-list [ [0] [0] [0] [0] [0] ]
end

to companies-buy-raw-materials
; only biodiesel companies currently have significant other input costs from raw materials.
  ask companies with [ color = blue ][
    set operatingvolume matrix:get materialin 2 0
;    show operatingvolume / materialmaxin
    let rawmaterialfraction matrix:get materialinprofile 0 0
    let totalrawmaterial operatingvolume * rawmaterialfraction
    let mcost totalrawmaterial * unitrawmaterialcost
    matrix:set materialin 0 0 totalrawmaterial
    set money money - mcost  
  ]
  ask companies with [ color = red ][
    set operatingvolume matrix:get materialin 1 0
;    show operatingvolume / materialmaxin
  ]
  ask companies with [ color = black ][
    set operatingvolume matrix:get materialin 1 0
;    show operatingvolume / materialmaxin
  ]
end

to update-finances
  set money money - operatingcosts
  let loanpayment 0
  set loanpayment initialloan * interestrate / ( 1 - (1 + interestrate ) ^ ( - 20 ) )
   if loan > 0 [
     set money money - loanpayment / 365
     set loan loan + interestrate * loan / 365 - loanpayment / 365
   ]
end

to calculate-profit
  set profit money - moneyold
  set moneyold money
end

to go-bust
  if money < 0 [ die ]
end

to get-older
  set age age + 1
end

; New friends are created everytime the time counter reaches 3.  It is then resest to 0.
to make-new-friends
  if contact-rate > 0 [
    let inv-contact-rate int 30 / contact-rate
    if ticks mod inv-contact-rate = 0 [
      create-friend-with one-of foodprocessors
      ask friends [ set color red ]
    ]
  ]
end

to create-new-companies
  let solidwasteleft matrix:get materialtolandfill 1 0 
;  show solidwasteleft
  if ticks mod company-creation-rate = 1 [
    if solidwasteleft > 200 [
      let composter-or-AD random 10 / 10
      let financial-incentive-for-AD 0.5
      ifelse financial-incentive-for-AD > composter-or-AD [
        let companysize 150
        let profitability 0
           if solidwasteleft > 1500 [
             if ROCs-incentive > 4 [
             set profitability 1 
             ]
           ]
           if profitability = 1 [ 
             ; anaerobic digester    
             create-companies 1 [ 
             set materialmaxin companysize
             set size materialmaxin / 200
             set materialinprofile matrix:from-row-list [[0] [1] [0] [0] [0]]
             set materialneed matrix:times-scalar materialinprofile materialmaxin
             set materialin matrix:from-row-list [ [0] [0] [0] [0] [0] ]
;             set process matrix:from-row-list [ [0 5 0 0 0] [0 0 0 0 0] [0 0 0 0 0] [0 1.4 0 0 0] [0 0 0 0 0] ] 
             set process matrix:from-row-list [ [0 1 0 0 0] [0 0 0 0 0] [0 0 0 0 0] [0 1.4 0 0 0] [0 0 0 0 0] ] 
             set unitrawmaterialcost 0 
             set unitproductvalue matrix:from-row-list [[1] [0] [0] [0] [0]]
             matrix:set unitproductvalue 0 0 ( 9.6 * ROCs-incentive + 0.04 * 50)
             matrix:set unitproductvalue 3 0 ( -1 * CO2-tax )
;             set operatingcosts 420 * companysize
             set operatingcosts 80 * companysize
             set initialloan 50000 * companysize
             set loan initialloan
             set money initialloan
             set moneyold money
             set profit 0
             set contractlength random 180
             set color red
             set age 0
             let xval random 12 + 5
             let yval random -12 - 5
             setxy xval yval
             create-friends-with n-of initial-contacts foodprocessors
             ask friends [ set color red ]
             ]        
         ]          
      ]
      [
        ; composter   
        create-companies 1 [        
        set materialmaxin random 200
        set size materialmaxin / 200
        set materialinprofile matrix:from-row-list [[0] [1] [0] [0] [0]]
        set materialin matrix:from-row-list [ [0] [0] [0] [0] [0] ]
        set materialneed matrix:times-scalar materialinprofile materialmaxin
  ;      show materialneed
        set process matrix:from-row-list [ [0 0.55 0 0 0] [0 0 0 0 0] [0 0 0 0 0] [0 0.324 0 0 0] [0 0 0 0 0]]
        set unitrawmaterialcost 0 
        set unitproductvalue matrix:from-row-list [[20] [0] [0] [-1] [0]] 
        matrix:set unitproductvalue 3 0 ( - CO2-tax )
        set color black
        set operatingcosts 5 * materialmaxin 
        set initialloan 500 * materialmaxin
        set loan initialloan
        set money initialloan
        set moneyold money
        set profit 0
        set contractlength 4
        set age 0
        setxy 5 -12
        let xval random -12 - 5
        let yval random -12 - 5
        setxy xval yval
        create-friends-with n-of initial-contacts foodprocessors
        ask friends [ set color red ]
        ] 
      ]
    ]
  ]
  let oilwasteleft matrix:get materialtolandfill 2 0 
  if ticks mod company-creation-rate = 1 [
; biodiesel
  let profitability 0
    if oilwasteleft > 800 [
      if mean [ matrix:get unitcontractvalue 2 0 ] of foodprocessors < 600 [
      set profitability 1 
      ]
  ]
    if profitability = 1 [
      create-companies 1 [ 
      set materialmaxin 600
      set size materialmaxin / 400
      set materialinprofile matrix:from-row-list [[0.13] [0] [1] [0] [0]]
      set materialin matrix:from-row-list [ [0] [0] [0] [0] [0] ]
      set materialneed matrix:times-scalar materialinprofile materialmaxin
      set process matrix:from-row-list [ [0 0 0.95 0 0] [0 0 0 0 0] [0 0 0 0 0] [0 0 0 0 0] [0 0 0.18 0 0]] 
      set unitrawmaterialcost 0.5 
      set unitproductvalue matrix:from-row-list [[644] [0] [0] [0] [-64]]
      matrix:set unitproductvalue 4 0 ( - landfillprice )
      set color blue 
      set operatingcosts materialmaxin * 0.05
      set initialloan 10000
      set loan initialloan
      set money initialloan
      set moneyold money
      set profit 0
      set age 0
      set contractlength 720
      let xval random 12 + 5
      let yval random 12 + 5
      setxy xval yval 
      create-friends-with n-of initial-contacts foodprocessors
      ask friends [ set color red ]
      ]
    ]
  ]
end

; Contracts only exist for a finite length of time, so update-contract-details updates the length
; of time remaining for each contract and terminates any that have come to the end of their natural
; life.
to update-contract-details
  let contractending nobody
  let contractvalue 0
  ask contracts [ set lengthofcontract lengthofcontract - 1 ] 
  set contractending contracts with [ lengthofcontract = 0 ] 
  ask contractending [ die ]
end

to update-prices
   matrix:set unitproductvalue 3 0 ( - CO2-tax )
   matrix:set unitproductvalue 4 0 ( - landfillprice )
      if color = red [
        matrix:set unitproductvalue 0 0 ( 9.6 * ROCs-incentive + 0.04 * 50)
      ]
end

to printoutinfo
  show materialmaxin
  show materialin
  show materialneed
  show materialout
  show materialinprofile
  show process
  show money
  show ethos
  show unitproductvalue
end

to makeplots
  set-current-plot "Waste to landfill"
    set-current-plot-pen "Organic waste"
    let solidwaste matrix:get materialtolandfill 1 0
    plot solidwaste 
;    set-current-plot-pen "Oil"
;    plot matrix:get materialtolandfill 2 0
;    set-current-plot-pen "Gas"
;    plot matrix:get materialtolandfill 3 0
;    set-current-plot-pen "Other"
;    plot matrix:get materialtolandfill 4 0
  set-current-plot "Organic waste price"
    set-current-plot-pen "Solid"
    histogram [ matrix:get unitcontractvalue 1 0 ] of foodprocessors
  set-current-plot "Waste oil price"
    set-current-plot-pen "Oil"
    histogram [ matrix:get unitcontractvalue 2 0 ] of foodprocessors
 set-current-plot "Composter profit"
    set-current-plot-pen "Profit"
    histogram [ profit ] of companies with [ color = black]
 set-current-plot "AD profit"
    set-current-plot-pen "Profit"
    histogram [ profit ] of companies with [ color = red ]
 set-current-plot "Mean organic price"
    set-current-plot-pen "Mean organic price"
    plot mean [ matrix:get unitcontractvalue 1 0 ] of foodprocessors
 set-current-plot "Mean Oil price"
    set-current-plot-pen "Mean Oil price"
    plot mean [ matrix:get unitcontractvalue 2 0 ] of foodprocessors
    
 set-current-plot "Mean Number of Contracts"
    ;; Composter
    let num-of-composters count companies with [ color = black]
    let num-of-links-C 0
    let mean-num-of-links-C 0
    ask companies with [ color = black ] [ 
      set num-of-links-C num-of-links-C + count my-links with [ color = black ] 
    ]
    ifelse num-of-composters > 0
      [ set mean-num-of-links-C num-of-links-C / num-of-composters ]
      [ ]
    set-current-plot-pen "Composter"
    plot mean-num-of-links-C
    
    ;; AD
    let num-of-AD count companies with [ color = red ]
    let num-of-links-AD 0
    let mean-num-of-links-AD 0
    ask companies with [ color = red ][
      set num-of-links-AD num-of-links-AD + count my-links with [ color = black ] 
    ]
    ifelse num-of-AD > 0
      [ set mean-num-of-links-AD num-of-links-AD / num-of-AD ]
      [ ]
    set-current-plot-pen "AD"
    plot mean-num-of-links-AD
  
    
 set-current-plot "Mean Contract Length"

  ;; AD 
  let mean-length-of-contracts-AD 0
  ask companies with [ color = red ] [ 
    set mean-length-of-contracts-AD mean-length-of-contracts-AD + contractlength
  ]
  ifelse num-of-AD > 0
    [ set mean-length-of-contracts-AD mean-length-of-contracts-AD / num-of-AD ]
    [ ]
  set-current-plot-pen "AD"
  plot mean-length-of-contracts-AD
 
  ;; Composeters
  let mean-length-of-contracts-C 0
  ask companies with [ color = black ] [ 
    set mean-length-of-contracts-C mean-length-of-contracts-C + contractlength
  ]
  ifelse num-of-composters > 0
    [ set mean-length-of-contracts-C mean-length-of-contracts-C / num-of-composters ]
    [ ]
  set-current-plot-pen "Composters"
  plot mean-length-of-contracts-C
 
       
 set-current-plot "Number of firms"
    set-current-plot-pen "Composters"
    plot count companies with [ color = black ]
     set-current-plot-pen "ADplants"
    plot count companies with [ color = red ]
set-current-plot "Age of firms"
    set-current-plot-pen "Composters"
    histogram [ age ] of companies with [ color = black ]
    set-current-plot-pen "ADplants"
    histogram [ age ] of companies with [ color = red ]
set-current-plot "Employees"
    set-current-plot-pen "Composters"
    plot sum [ 0.025 * operatingvolume ] of companies with [ color = black ]
    set-current-plot-pen "ADplants"
    plot sum [ 0.05 * operatingvolume ] of companies with [ color = red ] 
;      set meanwastevalue 
;  plot moneyend - moneystart
;  set-current-plot-pen "Number of contracts"
;  plot count contracts
end


;;============================================
;; Begin SAT edits for EFNC 
;;============================================

;; EFNC measures of the macroscopic state of the model
;; to make the EFNC measure in the JAVA code easier to understand
to-report get-composter-number
    report count companies with [ color = black ]
end

to-report get-AD-number
  report count companies with [ color = red ]
end

to-report get-solid-price
  report mean [ matrix:get unitcontractvalue 1 0 ] of foodprocessors 
end

to-report get-num-of-contract-composter
    let num-of-composters count companies with [ color = black]
    let num-of-links-C 0
    let mean-num-of-links-C 0
    ask companies with [ color = black ] [ 
      set num-of-links-C num-of-links-C + count my-links with [ color = black ] 
    ]
    ifelse num-of-composters > 0
      [ set mean-num-of-links-C num-of-links-C / num-of-composters ]
      [ ]
    report mean-num-of-links-C
end

to-report get-num-of-contract-AD
    let num-of-AD count companies with [ color = red ]
    let num-of-links-AD 0
    let mean-num-of-links-AD 0
    ask companies with [ color = red ][
      set num-of-links-AD num-of-links-AD + count my-links with [ color = black ] 
    ]
    ifelse num-of-AD > 0
      [ set mean-num-of-links-AD num-of-links-AD / num-of-AD ]
      [ ]
    report mean-num-of-links-AD
end

to-report get-length-of-contract-Composter
  let num-of-composters get-composter-number
  let mean-length-of-contracts-C 0
  ask companies with [ color = black ] [ 
    set mean-length-of-contracts-C mean-length-of-contracts-C + contractlength
  ]
  ifelse num-of-composters > 0
    [ set mean-length-of-contracts-C mean-length-of-contracts-C / num-of-composters ]
    [ ]
  report mean-length-of-contracts-C
end

to-report get-length-of-contract-AD
  let num-of-AD get-AD-number
  let mean-length-of-contracts-AD 0
  ask companies with [ color = red ] [ 
    set mean-length-of-contracts-AD mean-length-of-contracts-AD + contractlength
  ]
  ifelse num-of-AD > 0
    [ set mean-length-of-contracts-AD mean-length-of-contracts-AD / num-of-AD ]
    [ ]
  report mean-length-of-contracts-AD
end

;;============================================
;; End SAT edits for EFNC 
;;============================================;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
